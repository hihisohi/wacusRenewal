---
title: "hospital Page"

import { SITE_TITLE, SITE_DESCRIPTION } from "../../consts"; //타이틀이랑 웹사이트 설명 
import { ViewTransitions } from 'astro:transitions';  //페이지 이동시 부드럽게 페이지 전환 아스트로 설정이 2.0이여야한다 확인 후 넣어보자.

import "../../../public/css/marketing/section1.css"

import Head from '../../components/layout/Head.astro'; //메타태그들
import Header from '../../components/layout/Header.astro'; //진정한 헤더

import Loading from "../../components/Loading2.astro"; //상세로딩

import Hospital1 from '../../components/hospital/hospital1.astro'; // Your vision our marketing
import Hospital2 from "../../components/hospital/hospital2.astro"; // 잘 되는 병원은
import Hospital3 from "../../components/hospital/hospital3.astro"; // our service
import Hospital4 from "../../components/hospital/hospital4.astro"; // project
import Hospital5 from "../../components/hospital/hospital5.astro"; // our vision
import Section6 from "../../components/main/Section6.astro"; //우리의 경험
import Section8 from "../../components/main/Section8.astro"; //f&Q
import Section9 from "../../components/main/Section9.astro"; //지도
import Section10 from "../../components/main/Section10.astro"; //풋터
import ScrollIndicator from "../../components/inc/ScrollIndicator.astro"; //스크롤 인디케이터
---

<html lang="ko">
    <head>
        <Head title={SITE_TITLE} description={SITE_DESCRIPTION}/>
        <ScrollIndicator />
        <!-- <ViewTransitions /> -->
        <link rel="stylesheet" href="../../../public/km.css">
        <link rel="stylesheet" href="../../../public/css/main/section1.css">
        <link rel="stylesheet" href="../../../public/css/hospital/section1.css">
        <link rel="stylesheet" href="../../../public/css/hospital/section2.css">
        <link rel="stylesheet" href="../../../public/css/hospital/section3.css">
        <link rel="stylesheet" href="../../../public/css/hospital/section4.css">
        <link rel="stylesheet" href="../../../public/css/hospital/section5.css">
        <script src="../../../public/js/hospital/index.js"></script>
    
    </head>
    <body>
        <Header />
        <Loading />
        

        <div id="smooth-wrapper">
            <div id="smooth-content">
                <main class="mainpage">
                    <Hospital1 />
                    <Hospital2 />
                    <Hospital3 />
                    <Hospital4 />
                    <Hospital5 />

                    <Section6 />
                    <script is:inline>
                        const s6Split = new SplitText($('.s6_tit_group1'), { type: "chars" });
                        const s6Split2 = new SplitText($('.s6_tit_group p'), { type: "chars" });
                        const s6_tl02 = gsap.timeline()
                        .from('.section6', {
                            opacity: 0,
                        })
                        .from(s6Split.chars, {
                            y: 20,
                            opacity: 0,
                            stagger: {
                                amount: .3
                            },
                        })
                        .from(s6Split2.chars, {
                            y: 20,
                            opacity: 0,
                            stagger: {
                                amount: .1
                            },
                        }, '<')
                        .to('.s6_con', {
                            '--scaleX': 1,
                        }, '-=1')

                        ScrollTrigger.create({
                            trigger: ".section6",
                            start: "top center",
                            end: "top center",
                            animation: s6_tl02,
                            toggleActions: 'restart none none reverse'
                        })

                        // 원의 전체 길이를 계산하여 strokeDasharray와 strokeDashoffset에 설정
                        const s6_path = document.querySelector(".s6_line");
                        const s6_pathLength = s6_path.getTotalLength();

                        s6_path.style.strokeDasharray = s6_pathLength;
                        s6_path.style.strokeDashoffset = s6_pathLength;

                        /* counter */
                        const num1 = $(".s6_dot_group1 .num");
                        const num2 = $(".s6_dot_group2 .num");
                        const num3 = $(".s6_dot_group3 .num");
                        const num4 = $(".s6_dot_group4 .num");

                        const group1_tl = gsap.timeline({ paused: true });
                        const group2_tl = gsap.timeline({ paused: true });
                        const group3_tl = gsap.timeline({ paused: true });
                        const group4_tl = gsap.timeline({ paused: true });
                        
                        group1_tl
                            .set(s6_path, { strokeDashoffset: s6_pathLength})
                            .from('.how_many_con', { opacity: 0})
                            .to(s6_path, { strokeDashoffset: '107%', })
                            .addLabel("mylabel1")
                            .to('.s6_dot_group1 .s6_dot', { backgroundColor: "#00D0FF" }, "mylabel1")
                            .to('.s6_dot_group1 .s6_dot_txt_group', { opacity: 1, className:'+=on'}, "mylabel1-=0.5")
                            .to('.s6_dot_group1',{className:"s6_dot_group s6_dot_group1 on"})
                            .from(num1, {
                                textContent: 0,
                                ease: Power1.easeIn,
                                snap: { textContent: 1 },
                                stagger: {
                                    amount: .5
                                },
                            }, "mylabel1-=0.5");
                        
                        group2_tl
                            .to(s6_path, { strokeDashoffset: '82%', })
                            .addLabel("mylabel2")
                            .to('.s6_dot_group2 .s6_dot', { backgroundColor: "#00D0FF" }, "mylabel2")
                            .to('.s6_dot_group2 .s6_dot_txt_group', { opacity: 1 }, "mylabel2-=0.5")
                            .to('.s6_dot_group2',{className:"s6_dot_group s6_dot_group2 on"})
                            .from(num2, {
                                textContent: 0,
                                ease: Power1.easeIn,
                                snap: { textContent: 1 },
                                stagger: {
                                    amount: .5
                                },
                            }, "mylabel2-=0.5");
                        
                        group3_tl
                            .to(s6_path, { strokeDashoffset: '58%', })
                            .addLabel("mylabel3")
                            .to('.s6_dot_group3 .s6_dot', { backgroundColor: "#00D0FF" }, "mylabel3")
                            .to('.s6_dot_group3 .s6_dot_txt_group', { opacity: 1 }, "mylabel3-=0.5")
                            .to('.s6_dot_group3',{className:"s6_dot_group s6_dot_group3 on"})
                            .from(num3, {
                                textContent: 0,
                                ease: Power1.easeIn,
                                snap: { textContent: 1 },
                                stagger: {
                                    amount: .5
                                },
                            }, "mylabel3-=0.5");
                        
                        group4_tl
                            .to(s6_path, { strokeDashoffset: '35%', })
                            .addLabel("mylabel4")
                            .to('.s6_dot_group4 .s6_dot', { backgroundColor: "#00D0FF" }, "mylabel4")
                            .to('.s6_dot_group4 .s6_dot_txt_group', { opacity: 1 }, "mylabel4-=0.5")
                            .to('.s6_dot_group4',{className:"s6_dot_group s6_dot_group4 on"})
                            .from(num4, {
                                textContent: 0,
                                ease: Power1.easeIn,
                                snap: { textContent: 1 },
                                stagger: {
                                    amount: .5
                                },
                            }, "mylabel4-=0.5")
                            .to(s6_path, { strokeDashoffset: 0, });
                        
                        const groups = [
                            { timeline: group1_tl, threshold: 0.25, played: false },
                            { timeline: group2_tl, threshold: 0.5, played: false },
                            { timeline: group3_tl, threshold: 0.75, played: false },
                            { timeline: group4_tl, threshold: 1, played: false }
                        ];

                        let lastProgress = 0;

                        ScrollTrigger.create({
                            trigger: '.section6',
                            start: '0% 0%',
                            end: '+=4000',
                            pin: true,
                            onUpdate: (self) => {
                                const progress = self.progress;
                                const isReversing = progress < lastProgress;

                                groups.forEach((group, index) => {
                                    const prevThreshold = index === 0 ? 0 : groups[index - 1].threshold;
                                    
                                    if (!isReversing) { // 정방향 스크롤
                                        if (progress >= prevThreshold && progress < group.threshold && !group.played) {
                                            group.timeline.play();
                                            group.played = true;
                                        }
                                    } else { // 역방향 스크롤
                                        if (progress <= prevThreshold && group.played) {
                                            group.timeline.reverse();
                                            group.played = false;
                                        }
                                    }
                                });

                                lastProgress = progress;
                            },
                        });
                    </script>
                    
                    <Section8 />
                    <script is:inline>
                        /* section08 */
                        $(document).on('click', '.fna_list_group li', function () {
                            if ($(this).hasClass("on")) {
                                return; // 클릭 이벤트 종료
                            }
                            // 활성화 클래스 변경
                            $(".fna_list_group li").removeClass("on");
                            $(this).addClass("on");
                        
                            // 모든 fna_answer_group을 슬라이드 업
                            $(".fna_list_group li").find('.fna_answer_group').stop(true, true).slideUp(300);
                        
                            // 클릭한 요소의 fna_answer_group을 슬라이드 다운
                            $(this).find('.fna_answer_group').stop(true, true).slideDown(300);
                        });
                    </script>

                    <Section9 />
                    <Section10 client:load/>
                </main>

            </div>
        </div>

    </body>
</html>