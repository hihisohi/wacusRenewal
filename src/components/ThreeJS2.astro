---

---

<div id="container"></div>
<div id="container2"></div>
<div id="container3"></div>
<div id="container4"></div>

<style>
    canvas {background: #000;}
    main {width:100%;}
</style>




<!-- 2ë²ˆ -->

<script>

    import * as THREE from 'three';

    import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
    import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';
    import { RGBELoader } from 'three/addons/loaders/RGBELoader.js';
    let camera, scene, renderer;

    init();

    function init() {
        
        const container = document.getElementById('container3');


        camera = new THREE.PerspectiveCamera( 20, window.innerWidth / window.innerHeight, 0.25, 20 );
        camera.position.set( - 1.8, 0.6, 2.7 );
        scene = new THREE.Scene();

        new RGBELoader()
            .setPath( '/@fs/var/www/astro/src/assets/textures/' )
            .load( 'royal_esplanade_1k.hdr', function ( texture ) {

                texture.mapping = THREE.EquirectangularReflectionMapping;

                scene.background = texture;
                scene.environment = texture;

                render();

                // model

                const loader = new GLTFLoader().setPath( '/@fs/var/www/astro/src/assets/models/gltf/wacus_turnTable/' );
                loader.load( 'wacus_3.glb', async function ( gltf ) {

                    const model = gltf.scene;

                    await renderer.compileAsync( model, camera, scene );

                    scene.add( model );

                    render();
    
                } );

            } );

        renderer = new THREE.WebGLRenderer( { antialias: true } );
        renderer.setPixelRatio( window.devicePixelRatio );
        renderer.setSize( window.innerWidth, window.innerHeight );
        renderer.toneMapping = THREE.ACESFilmicToneMapping;
        renderer.toneMappingExposure = 1;
        container.appendChild( renderer.domElement );

        const controls = new OrbitControls( camera, renderer.domElement );
        controls.addEventListener( 'change', render ); // use if there is no animation loop
        controls.minDistance = 0.3;
        controls.maxDistance = 0.5;
        controls.target.set( 0, 0, 0 );
        controls.update();

        window.addEventListener( 'resize', onWindowResize );

    }

    function onWindowResize() {

        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();

        renderer.setSize( window.innerWidth, window.innerHeight );

        render();

    }

    //

    function render() {

        renderer.render( scene, camera );

    }

</script>


<script>

    import * as THREE from 'three';

    import Stats from 'three/addons/libs/stats.module.js';

    import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
    import { RoomEnvironment } from 'three/addons/environments/RoomEnvironment.js';

    import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';
    import { DRACOLoader } from 'three/addons/loaders/DRACOLoader.js';

    let mixer;

    const clock = new THREE.Clock();
    const container = document.getElementById('container');

    const stats = new Stats();
    container.appendChild( stats.dom );


    const renderer = new THREE.WebGLRenderer( { antialias: true } );
    renderer.setPixelRatio( window.devicePixelRatio );
    renderer.setSize( window.innerWidth, window.innerHeight );
    container.appendChild( renderer.domElement );


    const pmremGenerator = new THREE.PMREMGenerator( renderer );

    const scene = new THREE.Scene();
    scene.background = new THREE.Color( 0x0f0e0e );
    scene.environment = pmremGenerator.fromScene( new RoomEnvironment(), 0.04 ).texture;

    //light

    const light = new THREE.PointLight( 0xffffff, 5, 100 );
    light.position.set( -0.4, 1, 0 );
    scene.add( light );

    const camera = new THREE.PerspectiveCamera( 40, window.innerWidth / window.innerHeight, 1, 100 );
    camera.position.set( 0, 0.7, 1.2 );

    const controls = new OrbitControls( camera, renderer.domElement );
    controls.target.set( 0, 0.5, 0 );
    controls.update();
    controls.enablePan = false;
    controls.enableDamping = true;

    const dracoLoader = new DRACOLoader();
    dracoLoader.setDecoderPath( '/@fs/var/www/astro/src/assets/models/gltf/wacus_turnTable/' );

    const loader = new GLTFLoader();
    loader.setDRACOLoader( dracoLoader );
    loader.load( '/@fs/var/www/astro/src/assets/models/gltf/wacus_turnTable/wacus_3.glb', function ( gltf ) {

        const model = gltf.scene;
        model.position.set( 0, 0.5, 0 );
        model.scale.set( 3, 3, 3 );
        scene.add( model );

        mixer = new THREE.AnimationMixer( model );
        mixer.clipAction( gltf.animations[ 0 ] ).play();

        renderer.setAnimationLoop( animate );

    }, undefined, function ( e ) {

        console.error( e );

    } );


    window.onresize = function () {

        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();

        renderer.setSize( window.innerWidth, window.innerHeight );

    };


    function animate() {

        const delta = clock.getDelta();

        mixer.update( delta );

        controls.update();

        stats.update();

        renderer.render( scene, camera );

    }


</script>

<script>

    import * as THREE from 'three';

    import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
    import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';
    import { RGBELoader } from 'three/addons/loaders/RGBELoader.js';
    let camera, scene, renderer, ambientLight, pointLight;
    let mouse = {
        x: 0,
        y: 0
    };

    init();
    render();

    function init() {
        
        const container = document.getElementById('container2');


        camera = new THREE.PerspectiveCamera( 5, window.innerWidth / window.innerHeight, 0.25, 20 );
        camera.position.set( 0, -1, 11 );
        scene = new THREE.Scene();

        //light

        // const light = new THREE.PointLight( 0xffffff, 30, 100 );
        // light.position.set( 1, 1, 0 );
        // scene.add( light );

        // Lights
        // Ambient light
        // ambientLight = new THREE.AmbientLight(0x333333, 30);
        // scene.add(ambientLight);

        // Point light
        pointLight = new THREE.PointLight(0xff0000, 30, 50);
        pointLight.position.set(0, 0, 1);
        pointLight.castShadow = true;
        pointLight.shadow.bias = 0.0001;
        pointLight.mapSizeWidth = 2048; // Shadow Quality
        pointLight.mapSizeHeight = 2048; // Shadow Quality
        scene.add(pointLight);


        
        new RGBELoader()
            .setPath( '/@fs/var/www/astro/src/assets/textures/' )
            .load( 'royal_esplanade_1k.hdr', function ( texture ) {

                texture.mapping = THREE.EquirectangularReflectionMapping;

                scene.background = new THREE.Color( 0x000000 );
                scene.environment = texture;

                render();

                // model

                const loader = new GLTFLoader().setPath( '/@fs/var/www/astro/src/assets/models/gltf/section01/' );
                loader.load( 'text.glb', async function ( gltf ) {

                    const model = gltf.scene;

                    await renderer.compileAsync( model, camera, scene );

                    scene.add( model );

                    render();
    
                } );

            } );

        renderer = new THREE.WebGLRenderer( { antialias: true } );
        renderer.setPixelRatio( window.devicePixelRatio );
        renderer.setSize( window.innerWidth, window.innerHeight );
        renderer.toneMapping = THREE.ACESFilmicToneMapping;
        renderer.toneMappingExposure = 1;
        container.appendChild( renderer.domElement );

        const controls = new OrbitControls( camera, renderer.domElement );
        controls.addEventListener( 'change', render ); // use if there is no animation loop
        controls.minDistance = 5;
        controls.maxDistance = 15;
        controls.target.set( 0, 0, 0 );
        // controls.enablePan = false;
        // controls.enableDamping = true;
        controls.update(); 


        document.addEventListener('mousemove', onMouseMove, false);
        window.addEventListener( 'resize', onWindowResize );

    }

    function onWindowResize() {

        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();

        renderer.setSize( window.innerWidth, window.innerHeight );

    }

    //

    function render() {

        renderer.render( scene, camera );

    }

    // On mouse move
    function onMouseMove(event) {
        event.preventDefault();
        mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
        mouse.y = -(event.clientY / window.innerHeight) * 2 + 1.2;

        let vector = new THREE.Vector3(mouse.x, mouse.y, 0.5);
        vector.unproject(camera);
        let dir = vector.sub(camera.position).normalize();
        let distance = -camera.position.z / dir.z;
        let pos = camera.position.clone().add(dir.multiplyScalar(distance));
        pointLight.position.copy(pos);
        render()
    };

</script>
