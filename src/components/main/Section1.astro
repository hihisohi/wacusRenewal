---
// import "../../../public/css/main/section1.css"
---

<div id="container2" class="s1">
    <a href="/homepage" rel="external" id="hompage_link">
        <div class="s1Con1 s1Box">
            <div class="s1text1">Homepage &<br>Web Development<span class="c2">.</span></div>
            <div class="s1text2">홈페이지&<br class="MB">웹 개발</div>
            <img src="/img/light_on.webp" alt="" class="lightOn">
            <img src="/img/light_off.webp" alt="" class="lightOff">
            <div class="bg-or"></div>
            <div class="bg"></div>
            <div class="bg2"></div>
        </div>
    </a>
    <a href="/marketing" rel="external" id="online_marketing_link">
        <div class="s1Con2 s1Box">
            <div class="s1text1">Online Marketing<span class="c2">.</span></div>
            <div class="s1text2">온라인 마케팅</div>
            <div class="arrowBox">
                <img src="/img/s1Arrow.webp" alt="" class="arrow">
                <img src="/img/targetOn.webp" alt="" class="targetOn">
                <img src="/img/targetOff.webp" alt="" class="targetOff">
            </div>
            <div class="bg-or"></div>
            <div class="bg"></div>
            <div class="bg2"></div>
        </div>
    </a>
</div>


<!-- 2번 -->



<script is:inline>

        function gtag_report_conversion_online_marketing(url) {
        var callback = function () {
            if (typeof(url) != 'undefined') {
            window.location = url;
            }
        };
        gtag('event', 'conversion', {
            'send_to': 'AW-16997367498/K1btCOD0nLgaEMr9_Kg_',
            'value': 3.0,
            'currency': 'KRW',
            'event_callback': callback
        });
        return false;
        }

        function gtag_report_conversion_homepage(url) {
            var callback = function () {
                if (typeof(url) != 'undefined') {
                window.location = url;
                }
            };
            gtag('event', 'conversion', {
                'send_to': 'AW-16997367498/O-9zCN30nLgaEMr9_Kg_',
                'value': 3.0,
                'currency': 'KRW',
                'event_callback': callback
            });
            return false;
        }


        $('#online_marketing_link').on('click', function(e) {
            e.preventDefault();
            gtag_report_conversion_online_marketing($(this).attr('href'));
            return false;
        });
        $('#hompage_link').on('click', function(e) {
            e.preventDefault();
            gtag_report_conversion_homepage($(this).attr('href'));
            return false;
        });

</script>
<script>
        gsap.registerPlugin(SplitText, ScrollTrigger) ;
        import * as THREE from 'three';
        import { Image } from 'astro:assets';
        import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
        import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';
        import { RGBELoader } from 'three/addons/loaders/RGBELoader.js';
        // import { GUI } from 'three/examples/jsm/libs/dat.gui.module';
        import { GUI } from 'dat.gui';

        
        let camera, scene, renderer, ambientLight, pointLight, newLight,windowW,windowW2;
        let mouse = {
            x: 0,
            y: 0
        };

        
        let mouseX = 0;
        let mouseY = 0;
        
        let targetX = 0;
        let targetY = 0;

        let beta = 0;
        let gamma = 0;

        let model;
        let model2;
        
        
        function init() {
            windowW = $(window).innerWidth();
            let c1Width  = $('#container2').innerWidth();
            let c1Height  = $('#container2').innerHeight();
            const container = document.getElementById('container2');
            // camera = new THREE.PerspectiveCamera( 5, window.innerWidth / window.innerHeight, 0.25, 20 );
            camera = new THREE.PerspectiveCamera(
                10,
                c1Width / c1Height,
                0.1,
                1000
            );
            camera.position.set(-0.1, -1, 7);
            camera.rotation.set(-0.02, -0.02, -0.03);
            scene = new THREE.Scene();

            // 창 크기에 따라 카메라 위치 변경하는 함수
            function updateCameraPosition() {
                if (window.innerWidth <= 500) {
                    camera.position.z = 20;
                } else if (window.innerWidth <= 900) {
                    camera.position.z = 14;
                } else if (window.innerWidth <= 1350) {
                    camera.position.z = 12;
                } else {
                    camera.position.z = 7; // 기본값
                }
            }

            // 초기 카메라 위치 설정
            updateCameraPosition();

            // 창 크기가 변경될 때마다 카메라 위치 업데이트
            // window.addEventListener('resize', function() {
            //     camera.aspect = c1Width / c1Height;
            //     camera.updateProjectionMatrix();
            //     updateCameraPosition();
            // });
            

            // Point light
            pointLight = new THREE.PointLight(0x0000ff, 10, 10);
            pointLight.position.set(0, 0, 1);
            pointLight.castShadow = true;
            pointLight.shadow.bias = 0.0001;
            pointLight.mapSizeWidth = 2048; // Shadow Quality
            pointLight.mapSizeHeight = 2048; // Shadow Quality
            scene.add(pointLight);

            //New Point light
            newLight = new THREE.PointLight(0x800000, 10, 10);
            newLight.position.set(0, 0, 1);
            newLight.castShadow = true;
            newLight.shadow.bias = 0.0001;
            newLight.mapSizeWidth = 2048; // Shadow Quality
            newLight.mapSizeHeight = 2048; // Shadow Quality
            scene.add(newLight);
            


            
            new RGBELoader()
                // .setPath( '/@fs/home/ubuntu/wacus/public/img/' )
                .setPath( '/@fs/home/ubuntu/wacus/src/assets/textures/' )
                .load( 'space_bg_3hdr.hdr', function ( texture ) {
                    texture.mapping = THREE.EquirectangularReflectionMapping;
                    // scene.background = texture;
                    
                    renderer.setClearColor(0x000000, 0);
                    scene.environment = texture;
                    // model
                    // const Blackloader = new RGBELoader().setPath( '/@fs/home/ubuntu/wacus/src/assets/textures/' );
                    // Blackloader.load('black.hdr', function(black){
                    //     scene.background = black;
                    // });
                    const loader = new GLTFLoader().setPath( '/@fs/home/ubuntu/wacus/src/assets/models/gltf/section01/' );

                    loader.load( 'text_top.glb', async function ( gltf ) {

                            // const model = gltf.scene;
                            model = gltf.scene;

                            await renderer.compileAsync( model, camera, scene );

                            scene.add( model );
                            model.rotation.set(-0.38, -0.14, -0.03);
                            if (window.innerWidth <= 500) {
                                model.position.set(0, 0.6, 0);
                            } else {
                                model.position.set(-0.4, 0, 0); // 기본값
                            }
                            model.scale.set(1.2, 1.2,1.2);
                        
                            


                        let wt = 0;
                        let wb = 0;
                        let st = 0;
                        let sh = 0;
                        let sb = 0;
                        visibleCheck();
                        $(window).scroll(function(){
                            visibleCheck();
                        });
                        function visibleCheck() {
                            // render();
                            model.visible = true;
                            wt = $(window).scrollTop();
                            wb = wt + $(window).innerHeight();
                            st = $('#container2').position().top;
                            sh = $('#container2').outerHeight() + 100;
                            sb = st + sh;
                                if(wt < sb + 100 && wb > st ) {
                                    model.visible = true;
                                } else {
                                    model.visible = false;
                                }

                            }

                        } );

                        loader.load( 'text_bottom.glb', async function ( gltf ) {

                        // const model = gltf.scene;
                        model2 = gltf.scene;

                        await renderer.compileAsync( model2, camera, scene );

                        scene.add( model2 );
                        model2.rotation.set(-0.38, -0.14, -0.03);
                        if (window.innerWidth <= 500) {
                            model2.position.set(0, 0.2, 0);
                        } else {
                            model2.position.set(-0.1, -.4, 0); // 기본값
                        }
                        model2.scale.set(1.2, 1.2,1.2);

                        


                        let wt = 0;
                        let wb = 0;
                        let st = 0;
                        let sh = 0;
                        let sb = 0;
                        visibleCheck();
                        $(window).scroll(function(){
                        visibleCheck();
                        });
                        function visibleCheck() {
                        // render();
                        model2.visible = true;
                        wt = $(window).scrollTop();
                        wb = wt + $(window).innerHeight();
                        st = $('#container2').position().top;
                        sh = $('#container2').outerHeight() + 1000;
                        sb = st + sh;
                            if(wt < sb  && wb > st) {
                                model2.visible = true;
                            } else {
                                model2.visible = false;
                            }

                        }

                        } );

                } );
                
            renderer = new THREE.WebGLRenderer( { antialias: true } );
            renderer.setPixelRatio( window.devicePixelRatio );
            renderer.setSize( c1Width, c1Height );
            renderer.toneMapping = THREE.ACESFilmicToneMapping;
            renderer.toneMappingExposure = 1;
            container.appendChild( renderer.domElement );

            document.addEventListener('mousemove', onMouseMove, false);
            window.addEventListener( 'resize', onWindowResize );
            window.addEventListener('deviceorientation', deviceorientationHandler, false);
        }
        let c2Width  = $('#container2').innerWidth();
        let c2Height  = $('#container2').innerHeight();

        function onWindowResize() {
            windowW2 = $(window).innerWidth();
            if(windowW - windowW2 !== 0) {
                if (window.innerWidth <= 500) {
                    camera.position.z = 20;
                } else if (window.innerWidth <= 900) {
                    camera.position.z = 14;
                } else if (window.innerWidth <= 1350) {
                    camera.position.z = 12;
                } else {
                    camera.position.z = 7; // 기본값
                }

                if (window.innerWidth <= 500) {
                    model.position.set(0, 0.6, 0);
                    model2.position.set(0, 0.2, 0);
                } else {
                    model.position.set(-0.4, 0, 0); // 기본값
                    model2.position.set(-0.1, -.4, 0);
                }

                c2Width  = $('#container2').innerWidth();
                c2Height  = $('#container2').innerHeight();
                camera.aspect = c2Width / c2Height;
                camera.updateProjectionMatrix();
                renderer.setSize( c2Width, c2Height );
            };
            windowW = $(window).innerWidth();

        }

        //


        let WIDTH = window.innerWidth;
        let HEIGHT = window.innerHeight;


        let windowHalfX = WIDTH / 2;
        let windowHalfY = HEIGHT / 2;


        // On mouse move
        function onMouseMove(event) {
            event.preventDefault();
            mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
            // mouse.y = -(event.clientY / window.innerHeight) * 2 + 1.2;

            let vector = new THREE.Vector3(mouse.x, mouse.y, 0.5);
            vector.unproject(camera);
            let dir = vector.sub(camera.position).normalize();
            let distance = -camera.position.z / dir.z;
            let pos = camera.position.clone().add(dir.multiplyScalar(distance));
            pointLight.position.copy(pos);
        
            mouseX = event.clientX - windowHalfX;
            mouseY = event.clientY - windowHalfY;
        };

        function deviceorientationHandler(event) {
            event.preventDefault();
            beta = event.beta;
            gamma = event.gamma;
        }

        

        
        const animete = () => {
            // if(window.innerWidth > 1025) {
                const time = performance.now() / 1000;
                const lightTime = time * 1;
                newLight.position.x = Math.sin( lightTime * 0.7 ) * 3;
                newLight.position.z = Math.cos( lightTime * 0.3 ) * 2;
            // }
            if(window.innerWidth > 768) {
                targetX = mouseX * 0.0003;
                targetY = mouseY * 0.0002;

                if (model) {
                    model.rotation.y += 0.1 * (targetX - model.rotation.y);
                    model.rotation.x += 0.1 * (targetY - model.rotation.x);
                }

                if (model2) {
                    model2.rotation.y += 0.1 * (targetX - model2.rotation.y);
                    model2.rotation.x += 0.1 * (targetY - model2.rotation.x);
                }
            } else  {
                targetX = beta * 0.005;
                targetY = gamma * 0.005;

                if (model) {
                    model.rotation.y += 0.1 * (targetY - model.rotation.y);
                    model.rotation.x += 0.1 * (targetX - model.rotation.x);
                }

                if (model2) {
                    model2.rotation.y += 0.1 * (targetY - model2.rotation.y) ;
                    model2.rotation.x += 0.1 * (targetX - model2.rotation.x);
                }
            }
            
            camera.lookAt(scene.position);
            //장면의 위치를 바라봄
            camera.updateProjectionMatrix();
            //변경된 값을 카메라에 적용한다
            
            renderer.render(scene, camera);
            requestAnimationFrame(animete);
        };

        const stageResize = () => {
            // console.log("resize");
            
            windowHalfX = c2Width / 2;
            windowHalfY = c2Height / 2;
            renderer.setSize(c2Width, c2Height);
            camera.aspect = c2Width / c2Height;
            //카메라 비율을 화면 비율에 맞춘다
        };
        
        
        window.addEventListener("resize", stageResize);
        // document.addEventListener('astro:page-load', () => {
        //     init();
        //     animete();
        // });
        $(document).ready(function(){
            init();
            animete();
        });
        
        // render();
        // animete();

</script> 
