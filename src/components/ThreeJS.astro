---
---

<div id="container2" class="s1">
    <a href="/homepage" rel="external">
        <div class="s1Con1 s1Box">
            <div class="s1text1">Homepage &<br>Web Development<span class="c2">.</span></div>
            <div class="s1text2">홈페이지&<br class="MB">웹 개발</div>
            <img src="/img/light_on.png" alt="" class="lightOn">
            <img src="/img/light_off.png" alt="" class="lightOff">
            <div class="bg-or"></div>
            <div class="bg"></div>
            <div class="bg2"></div>
        </div>
    </a>
    <a href="/marketing" rel="external">
        <div class="s1Con2 s1Box">
            <div class="s1text1">Online Marketing<span class="c2">.</span></div>
            <div class="s1text2">온라인 마케팅</div>
            <div class="arrowBox">
                <img src="/img/s1Arrow.png" alt="" class="arrow">
                <img src="/img/targetOn.png" alt="" class="targetOn">
                <img src="/img/targetOff.png" alt="" class="targetOff">
            </div>
            <div class="bg-or"></div>
            <div class="bg"></div>
            <div class="bg2"></div>
        </div>
    </a>
</div>

<style>
    main {width:100%;overflow: hidden;}
    #container2 {width:100%;overflow: hidden;height: 100vh;}
    #container2 canvas {width: 100%;}
    #container2 .s1Dash .web {display: flex;position: absolute;top:25%;left:40%;border-radius: 100%;transform: translate(-50%,-50%);}
    #container2 .s1Dash .marketing {display: flex;position: absolute;top:1%;left:75%;border-radius: 100%;transform: translate(-50%,-50%);}
    #container2 .s1Dash .web:after {
        content:'WEB';
        position: absolute;
        left:calc(100% + 16px);
        top:50%;
        color: #00D0FF;
        font-family: Poppins;
        font-size: 14px;
        font-style: normal;
        font-weight: 300;
        line-height: normal;
        transform: translateY(-50%);
    }
    #container2 .s1Dash .marketing:after {
        content:'MARKETING';
        position: absolute;
        left:calc(100% + 16px);
        top:50%;
        color: #00D0FF;
        font-family: Poppins;
        font-size: 14px;
        font-style: normal;
        font-weight: 300;
        line-height: normal;
        transform: translateY(-50%);
    }
    
    #container2 .s1Dash .web .circle, #container2 .s1Dash .marketing .circle {width:74px;height: 74px;border:1px solid #525252; animation: s1Rotate 10s infinite linear;border-radius: 100%;}
    #container2 .s1Dash .web .circle2, #container2 .s1Dash .marketing .circle2 {width:6px;height:6px;border-radius: 100%;background: #00D0FF;position: absolute;left: 0;transform: translateX(-50%);top:50%;}
    #container2 .s1Dash .web .circle2:after, #container2 .s1Dash .marketing .circle2:after {width:50px;height: 50px;border-radius: 100%;content:'';position: absolute;transform: translate(-50%,-50%);top:50%;left:50%;border:1px solid #00D0FF;animation: circleWave 2s infinite;}
    #container2 .s1Box {
        position:absolute;
        left: 57%;
        top: 20%;
        width: 299px;
        height: 289px;
        /* display: inline-flex; */
        padding: 22px 30px 0 30px;
        align-items: center;
        flex-shrink: 0;
        border-radius: 20px;
        /* background: linear-gradient(142deg, #161616 0%, #181818 100%); */
        box-shadow: 0px 4px 4px 0px rgba(0, 0, 0, 0.25);
        backdrop-filter: blur(10px);
        animation:updownMove 2s infinite ease-in-out;
        font-family: 'Poppins','Pretendard';
        font-size:19px;
        line-height: 1.5;
        color:#fff;
        display: flex;
        flex-direction: column;
        justify-self: start;
        align-items: start;
        z-index: 10;
    }
    .s1Box .s1text1,.s1Box .s1text2 {
        z-index: 2;
    }

    .s1Box .lightOn, .s1Box .lightOff {
        position: absolute;
        right: 0%;
        bottom:4px;
        z-index: 3;
        width:75.4%;
        transition: .45s all ease;
        opacity: 1;
    }
    #container2 .s1Box:hover .lightOff {
        opacity: 0;
    }

    #container2 .s1Box .bg-or {
        width:100%;
        height: 100%;
        border-radius: 20px;
        /* border: 1px solid #525252; */
        background: linear-gradient(142deg, #161616 0%, #181818 100%);
        position: absolute;
        top:0;
        left:0;
        z-index: 1;
    }
    
    #container2 .s1Box .bg {
        opacity: 0;
        transition:all .45s ease;
        width:calc(100% + 2px);
        height:calc(100% + 2px);
        left: -1px;
        top:-1px;
        position: absolute;
        border-radius: 20px;
        background: linear-gradient(134deg, #00D0FF 1.4%, #FFF 49.93%, #9747FF 98.45%);
        content:'';
        z-index: -1;
    }
    #container2 .s1Box .bg2 {
        opacity: 1;
        transition:all .45s ease;
        width:calc(100% + 2px);
        height:calc(100% + 2px);
        left: -1px;
        top:-1px;
        position: absolute;
        border-radius: 20px;
        background: linear-gradient(134deg, #525252 0%, #181818 100%);
        content:'';
        z-index: -2;
    }

    #container2 .s1Box:hover .bg {
        opacity: 1;
    }
    #container2 .s1Box .c2 {
        transition:.6s all ease;
        display: inline-block;
    }
    #container2 .s1Box:hover .c2 {
        transform: translateX(10px);
    }

    #container2 .s1Box.s1Con2 {
        left: 74%;
        top: 24%;
        animation:updownMove 2.3s infinite ease-in-out;
    }
    #container2 .arrowBox {
        width:84.28%;
        position: absolute;
        right: 0%;
        bottom:4px;
        z-index: 3;
        transition: .45s all ease;
        opacity: 1;
        height: 78.5%;
    }
    #container2 .arrowBox .targetOn,#container2 .arrowBox .targetOff {
        position: absolute;
        right:0;
        bottom:0;
        width:85.71%;
        opacity: 1;
        

    }
    #container2 .arrowBox .arrow {
        left:0;
        top:5%;
        position: absolute;
        width:41.6%;
        transition:.3s all ease;
        z-index:1;
    } 
    #container2 .s1Box:hover .arrowBox .arrow {
        left:20%;
        top:25%;
        transform: rotate(15deg);
    }

    #container2 .s1Box:hover .targetOff {
        opacity: 0;
        transition:.3s .2s all ease;
    }

    @keyframes s1Rotate {
        0% {transform: rotate(0);}
        100% {transform: rotate(360deg);}
    }
    @keyframes circleWave {
        0% {width:0;height:0;opacity: 1;}
        100% {width:50px;height:50px;opacity: 0;}
    }
    @media screen and (max-width:1550px) {
        #container2 .s1Box {width:200px;height: 193px;font-size:17px;}
        .s1Box .lightOn, .s1Box .lightOff {width:70%;}
        #container2 .arrowBox {width:80%;height:74.5%;}
        #container2 .s1Box.s1Con2 {
            left: 72%;
        }
    }
    @media screen and (max-width:1024px) {
        #container2 .s1Box {width:180px;height: 173.7px;font-size:17px;top:24%;padding: 16px 15px 0;}
        .s1Box .lightOn, .s1Box .lightOff {width:70%;}
        #container2 .arrowBox {width:80%;height:74.5%;}
        #container2 .s1Box.s1Con2 {
            left: 77%;
            top: 28%;
            animation:updownMove 2.3s infinite ease-in-out;
        }
    }
    @media screen and (max-width:768px) {
        #container2 {height:820px}
        #container2 .s1Box {width:40vw;height:38.6vw;font-size:3.5vw;left:10%;top:56%;padding: 16px 15px 0;}
        .s1Box .lightOn, .s1Box .lightOff {width:70%;}
        #container2 .arrowBox {width:80%;height:74.5%;}
        #container2 .s1Box.s1Con2 {
            left: 55%;
            top: 58%;
            animation:updownMove 2.3s infinite ease-in-out;
        }
    }
    
    @keyframes updownMove {
        0% {transform: translateY(0);}
        50% {transform: translateY(16px);}
        100% {transform: translateY(0);}
    }

</style>




<!-- 2번 -->



<script>
        gsap.registerPlugin(SplitText, ScrollTrigger) ;
        import * as THREE from 'three';
        import { Image } from 'astro:assets';
        import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
        import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';
        import { RGBELoader } from 'three/addons/loaders/RGBELoader.js';
        // import { GUI } from 'three/examples/jsm/libs/dat.gui.module';
        import { GUI } from 'dat.gui';

        
        let camera, scene, renderer, ambientLight, pointLight, newLight,windowW,windowW2;
        let mouse = {
            x: 0,
            y: 0
        };

        
        let mouseX = 0;
        let mouseY = 0;
        
        let targetX = 0;
        let targetY = 0;

        let model;
        let model2;
        
        
        function init() {
            windowW = $(window).innerWidth();
            let c1Width  = $('#container2').innerWidth();
            let c1Height  = $('#container2').innerHeight();
            const container = document.getElementById('container2');
            // camera = new THREE.PerspectiveCamera( 5, window.innerWidth / window.innerHeight, 0.25, 20 );
            camera = new THREE.PerspectiveCamera(
                10,
                c1Width / c1Height,
                0.1,
                1000
            );
            camera.position.set(-0.1, -1, 7);
            camera.rotation.set(-0.02, -0.02, -0.03);
            scene = new THREE.Scene();

            // 창 크기에 따라 카메라 위치 변경하는 함수
            function updateCameraPosition() {
                if (window.innerWidth <= 500) {
                    camera.position.z = 20;
                } else if (window.innerWidth <= 900) {
                    camera.position.z = 14;
                } else if (window.innerWidth <= 1350) {
                    camera.position.z = 12;
                } else {
                    camera.position.z = 7; // 기본값
                }
            }

            // 초기 카메라 위치 설정
            updateCameraPosition();

            // 창 크기가 변경될 때마다 카메라 위치 업데이트
            // window.addEventListener('resize', function() {
            //     camera.aspect = c1Width / c1Height;
            //     camera.updateProjectionMatrix();
            //     updateCameraPosition();
            // });
            

            // Point light
            pointLight = new THREE.PointLight(0x0000ff, 10, 10);
            pointLight.position.set(0, 0, 1);
            pointLight.castShadow = true;
            pointLight.shadow.bias = 0.0001;
            pointLight.mapSizeWidth = 2048; // Shadow Quality
            pointLight.mapSizeHeight = 2048; // Shadow Quality
            scene.add(pointLight);

            //New Point light
            newLight = new THREE.PointLight(0x800000, 10, 10);
            newLight.position.set(0, 0, 1);
            newLight.castShadow = true;
            newLight.shadow.bias = 0.0001;
            newLight.mapSizeWidth = 2048; // Shadow Quality
            newLight.mapSizeHeight = 2048; // Shadow Quality
            scene.add(newLight);
            


            
            new RGBELoader()
                // .setPath( '/@fs/home/ubuntu/wacus/public/img/' )
                .setPath( '/@fs/home/ubuntu/wacus/src/assets/textures/' )
                .load( 'space_bg_3hdr.hdr', function ( texture ) {
                    texture.mapping = THREE.EquirectangularReflectionMapping;
                    // scene.background = texture;
                    
                    renderer.setClearColor(0x000000, 0);
                    scene.environment = texture;
                    // model
                    // const Blackloader = new RGBELoader().setPath( '/@fs/home/ubuntu/wacus/src/assets/textures/' );
                    // Blackloader.load('black.hdr', function(black){
                    //     scene.background = black;
                    // });
                    const loader = new GLTFLoader().setPath( '/@fs/home/ubuntu/wacus/src/assets/models/gltf/section01/' );

                    loader.load( 'text_top.glb', async function ( gltf ) {

                            // const model = gltf.scene;
                            model = gltf.scene;

                            await renderer.compileAsync( model, camera, scene );

                            scene.add( model );
                            model.rotation.set(-0.38, -0.14, -0.03);
                            if (window.innerWidth <= 500) {
                                model.position.set(0, 0.6, 0);
                            } else {
                                model.position.set(-0.4, 0, 0); // 기본값
                            }
                            model.scale.set(1.2, 1.2,1.2);
                        
                            


                        let wt = 0;
                        let wb = 0;
                        let st = 0;
                        let sh = 0;
                        let sb = 0;
                        visibleCheck();
                        $(window).scroll(function(){
                            visibleCheck();
                        });
                        function visibleCheck() {
                            // render();
                            model.visible = true;
                            wt = $(window).scrollTop();
                            wb = wt + $(window).innerHeight();
                            st = $('#container2').position().top;
                            sh = $('#container2').outerHeight();
                            sb = st + sh;
                                if(wt < sb && wb > st ) {
                                    model.visible = true;
                                } else {
                                    model.visible = false;
                                }

                            }

                        } );

                        loader.load( 'text_bottom.glb', async function ( gltf ) {

                        // const model = gltf.scene;
                        model2 = gltf.scene;

                        await renderer.compileAsync( model2, camera, scene );

                        scene.add( model2 );
                        model2.rotation.set(-0.38, -0.14, -0.03);
                        if (window.innerWidth <= 500) {
                            model2.position.set(0, 0.2, 0);
                        } else {
                            model2.position.set(-0.1, -.4, 0); // 기본값
                        }
                        model2.scale.set(1.2, 1.2,1.2);

                        


                        let wt = 0;
                        let wb = 0;
                        let st = 0;
                        let sh = 0;
                        let sb = 0;
                        visibleCheck();
                        $(window).scroll(function(){
                        visibleCheck();
                        });
                        function visibleCheck() {
                        // render();
                        model2.visible = true;
                        wt = $(window).scrollTop();
                        wb = wt + $(window).innerHeight();
                        st = $('#container2').position().top;
                        sh = $('#container2').outerHeight();
                        sb = st + sh;
                            if(wt < sb && wb > st ) {
                                model2.visible = true;
                            } else {
                                model2.visible = false;
                            }

                        }

                        } );

                } );
                
            renderer = new THREE.WebGLRenderer( { antialias: true } );
            renderer.setPixelRatio( window.devicePixelRatio );
            renderer.setSize( c1Width, c1Height );
            renderer.toneMapping = THREE.ACESFilmicToneMapping;
            renderer.toneMappingExposure = 1;
            container.appendChild( renderer.domElement );

            document.addEventListener('mousemove', onMouseMove, false);
            window.addEventListener( 'resize', onWindowResize );
        }
        let c2Width  = $('#container2').innerWidth();
        let c2Height  = $('#container2').innerHeight();

        function onWindowResize() {
            windowW2 = $(window).innerWidth();
            if(windowW - windowW2 !== 0) {
                if (window.innerWidth <= 500) {
                    camera.position.z = 20;
                } else if (window.innerWidth <= 900) {
                    camera.position.z = 14;
                } else if (window.innerWidth <= 1350) {
                    camera.position.z = 12;
                } else {
                    camera.position.z = 7; // 기본값
                }

                if (window.innerWidth <= 500) {
                    model.position.set(0, 0.6, 0);
                    model2.position.set(0, 0.2, 0);
                } else {
                    model.position.set(-0.4, 0, 0); // 기본값
                    model2.position.set(-0.1, -.4, 0);
                }

                c2Width  = $('#container2').innerWidth();
                c2Height  = $('#container2').innerHeight();
                camera.aspect = c2Width / c2Height;
                camera.updateProjectionMatrix();
                renderer.setSize( c2Width, c2Height );
            };
            windowW = $(window).innerWidth();

        }

        //


        let WIDTH = window.innerWidth;
        let HEIGHT = window.innerHeight;


        let windowHalfX = WIDTH / 2;
        let windowHalfY = HEIGHT / 2;


        // On mouse move
        function onMouseMove(event) {
            event.preventDefault();
            mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
            // mouse.y = -(event.clientY / window.innerHeight) * 2 + 1.2;

            let vector = new THREE.Vector3(mouse.x, mouse.y, 0.5);
            vector.unproject(camera);
            let dir = vector.sub(camera.position).normalize();
            let distance = -camera.position.z / dir.z;
            let pos = camera.position.clone().add(dir.multiplyScalar(distance));
            pointLight.position.copy(pos);
        
            mouseX = event.clientX - windowHalfX;
            mouseY = event.clientY - windowHalfY;
        };

        

        
        const animete = () => {
            // if(window.innerWidth > 1025) {
                const time = performance.now() / 1000;
                const lightTime = time * 1;
                newLight.position.x = Math.sin( lightTime * 0.7 ) * 3;
                newLight.position.z = Math.cos( lightTime * 0.3 ) * 2;
            // }
            if(window.innerWidth > 768) {
                targetX = mouseX * 0.0003;
                targetY = mouseY * 0.0002;

                if (model) {
                    model.rotation.y += 0.1 * (targetX - model.rotation.y);
                    model.rotation.x += 0.1 * (targetY - model.rotation.x);
                }

                if (model2) {
                    model2.rotation.y += 0.1 * (targetX - model2.rotation.y);
                    model2.rotation.x += 0.1 * (targetY - model2.rotation.x);
                }
            } else {
                if (model) {
                    model.rotation.y = 0.1;
                    model.rotation.x = -0.1;
                }

                if (model2) {
                    model2.rotation.y = 0.1;
                    model2.rotation.x = -0.1;
                }
            }
            
            camera.lookAt(scene.position);
            //장면의 위치를 바라봄
            camera.updateProjectionMatrix();
            //변경된 값을 카메라에 적용한다
            
            renderer.render(scene, camera);
            requestAnimationFrame(animete);
        };

        const stageResize = () => {
            // console.log("resize");
            
            windowHalfX = c2Width / 2;
            windowHalfY = c2Height / 2;
            renderer.setSize(c2Width, c2Height);
            camera.aspect = c2Width / c2Height;
            //카메라 비율을 화면 비율에 맞춘다
        };
        
        
        window.addEventListener("resize", stageResize);
        document.addEventListener('astro:page-load', () => {
            init();
            animete();
        });
        // render();
        // animete();

    
</script>
